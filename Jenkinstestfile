pipeline {
    agent any

    environment {
        DOCKER_CREDENTIALS_ID = 'docker-container-hub-cred'
        FRONTEND_IMAGE = 'tejaroyal/edufrontend-app'
        BACKEND_IMAGE = 'tejaroyal/edubackend-app'
        K8S_NAMESPACE = 'edu-meet'
        K8S_YAML_PATH = 'C:/Users/Admin/Desktop/GITHUB/K8S-EduMeet/kubernetesDeployments'
    }

    stages {
        stage('checkout code') {
            steps {
                checkout scmGit(branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[credentialsId: '3f601ce9-7463-4bde-bf20-ca21df940366', url: 'https://github.com/teja94411/K8S-EduMeet.git']])
            }
        }
        stage('Check Minikube') {
            steps {
                script {
                    // Print out the PATH to debug if Minikube is in the PATH
                    bat 'echo %PATH%'
                    // Check if Minikube is available in PATH
                    bat 'minikube version'
                }
            }
        }
        stage('Set Up Minikube') {
            steps {
                script {
                    // Check if Minikube is already running
                    def minikubeStatus = bat(script: 'minikube status', returnStatus: true)
                    if (minikubeStatus != 0) {
                        echo 'Minikube is not running. Starting Minikube...'
                        bat 'minikube start --driver=docker'
                    } else {
                        echo 'Minikube is already running.'
                    }

                    // Set Docker environment for Minikube
                    bat 'minikube -p minikube docker-env --shell cmd'
                }
            }
        }
        stage('Set kubectl Context') {
            steps {
                script {
                    // Set kubectl to use Minikube context
                    bat 'kubectl config use-context minikube'
                }
            }
        }
        stage('Login to Docker Hub') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: DOCKER_CREDENTIALS_ID, usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                        if (isUnix()) {
                            sh 'echo $DOCKER_PASS | docker login -u $DOCKER_USER --password-stdin'
                        } else {
                            bat '''
                                echo %DOCKER_PASS% > pass.txt
                                docker login -u %DOCKER_USER% --password-stdin < pass.txt
                                del pass.txt
                            '''
                        }
                    }    
                }
            }
        }
        stage('Build & Push Docker Images') {
            steps {
                script {
                    if (isUnix()) {
                        sh "docker build -t $FRONTEND_IMAGE -f Dockerfile ."
                        sh "docker build -t $BACKEND_IMAGE -f Dockerfile ."
                        sh "docker push $FRONTEND_IMAGE"
                        sh "docker push $BACKEND_IMAGE"
                    } else {
                        bat "docker build -t %FRONTEND_IMAGE% -f Dockerfile ."
                        bat "docker build -t %BACKEND_IMAGE% -f Dockerfile ."
                        bat "docker push %FRONTEND_IMAGE%"
                        bat "docker push %BACKEND_IMAGE%"
                    }
                }
            }
        }
        stage('Create Kubernetes Namespace') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl create namespace $K8S_NAMESPACE || echo 'Namespace already exists'
                        '''
                    } else {
                        bat '''
                            kubectl create namespace %K8S_NAMESPACE% || echo 'Namespace already exists'
                        '''
                    }
                }
            }
        }
        stage('Deploy ConfigMap and Secrets') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl create configmap edu-app-config --from-literal=APP_ENV=production --namespace=$K8S_NAMESPACE || echo 'ConfigMap already exists'
                            kubectl create secret generic edu-db-credentials --from-literal=DB_USER=admin --from-literal=DB_PASSWORD=secret123 --namespace=$K8S_NAMESPACE || echo 'Secret already exists'
                        '''
                    } else {
                        bat '''
                            kubectl create configmap edu-app-config --from-literal=APP_ENV=production --namespace=%K8S_NAMESPACE% || echo 'ConfigMap already exists'
                            kubectl create secret generic edu-db-credentials --from-literal=DB_USER=admin --from-literal=DB_PASSWORD=secret123 --namespace=%K8S_NAMESPACE% || echo 'Secret already exists'
                        '''
                    }
                }
            }
        }
        stage('Deploy Application to Kubernetes') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl apply -f $K8S_YAML_PATH/frontend-deployment.yml --namespace=$K8S_NAMESPACE
                            kubectl apply -f $K8S_YAML_PATH/backend-deployment.yml --namespace=$K8S_NAMESPACE
                            kubectl apply -f $K8S_YAML_PATH/postgres-deployment.yml --namespace=$K8S_NAMESPACE
                        '''
                    } else {
                        bat '''
                            kubectl apply -f %K8S_YAML_PATH%\\frontend-deployment.yml --namespace=%K8S_NAMESPACE%
                            kubectl apply -f %K8S_YAML_PATH%\\backend-deployment.yml --namespace=%K8S_NAMESPACE%
                            kubectl apply -f %K8S_YAML_PATH%\\postgres-deployment.yml --namespace=%K8S_NAMESPACE%
                        '''
                    }
                }
            }
        }
        stage('Deploy DaemonSet for Logging') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl apply -f $K8S_YAML_PATH/logging-daemonset.yml --namespace=$K8S_NAMESPACE
                        '''
                    } else {
                        bat '''
                            kubectl apply -f %K8S_YAML_PATH%\\logging-daemonset.yml --namespace=%K8S_NAMESPACE%
                        '''
                    }
                }
            }
        }

        stage('Scale Application (ReplicaSets)') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl scale deployment frontend-deployment --replicas=3 --namespace=$K8S_NAMESPACE
                            kubectl scale deployment backend-deployment --replicas=3 --namespace=$K8S_NAMESPACE
                        '''
                    } else {
                        bat '''
                            kubectl scale deployment frontend-deployment --replicas=3 --namespace=%K8S_NAMESPACE%
                            kubectl scale deployment backend-deployment --replicas=3 --namespace=%K8S_NAMESPACE%
                        '''
                    }
                }
            }
        }

        stage('Set Up Ingress Resource') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl apply -f $K8S_YAML_PATH/ingress.yml --namespace=$K8S_NAMESPACE
                        '''
                    } else {
                        bat '''
                            kubectl apply -f %K8S_YAML_PATH%\\ingress.yml --namespace=%K8S_NAMESPACE%
                        '''
                    }
                }
            }
        }

        stage('Final Verification') {
            steps {
                script {
                    if (isUnix()) {
                        sh '''
                            kubectl get pods --namespace=$K8S_NAMESPACE
                            kubectl get services --namespace=$K8S_NAMESPACE
                            kubectl get ingress --namespace=$K8S_NAMESPACE
                            kubectl get daemonset --namespace=$K8S_NAMESPACE
                        '''
                    } else {
                        bat '''
                            kubectl get pods --namespace=%K8S_NAMESPACE%
                            kubectl get services --namespace=%K8S_NAMESPACE%
                            kubectl get ingress --namespace=%K8S_NAMESPACE%
                            kubectl get daemonset --namespace=%K8S_NAMESPACE%
                        '''
                    }
                }
            }
        }
    }
}
